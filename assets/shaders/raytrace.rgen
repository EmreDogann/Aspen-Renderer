#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

// Includes
#include "raycommon.glsl"

struct PointLight {
  vec4 position;
  vec4 color;  // w is intensity
};

// Uniform Buffer Object (UBO)
layout(set = 0, binding = 0) uniform GlobalUbo {
    mat4 projectionMatrix;
    mat4 viewMatrix;
    mat4 inverseProjectionMatrix;
    mat4 inverseViewMatrix;
    PointLight lights[10];
    vec3 ambientLightColor;
} ubo;

// Push constant structure for the ray tracer
struct PushConstantRay {
  vec4 clearColor;
  vec3 lightPosition;
  float lightIntensity;
  int textureMapping;
  int shadows;
  float shadowBias;
  float shadowOpacity;
  int useReflections;
  int useRefractions;
  float minRange;
	int totalBounces;
};

layout(push_constant) uniform _PushConstantRay {
  PushConstantRay pcRay;
};

layout(binding = 0, set = 1) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 1, rgba8) uniform image2D image;

// Ray Payload
layout(location = 0) rayPayloadEXT HitPayload rPayload;

void main() {
    // Compute the pixel coordinates of the ray.
    // gl_LaunchIDEXT - Integer coordinates of the pixel being rendered.
    // gl_LaunchSizeEXT - Image Size passed from vkCmdTraceRaysKHR().
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin    = ubo.inverseViewMatrix * vec4(0, 0, 0, 1);
    vec4 target    = ubo.inverseProjectionMatrix * vec4(d.x, d.y, 1, 1);
    vec4 direction = ubo.inverseViewMatrix * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = pcRay.minRange;
    float tMax     = 10000.0;

    // Initialize members of the payload:
    rPayload.depth       = 0;
    rPayload.hitValue    = vec3(0.0);
    rPayload.attenuation = vec3(1.0);
    rPayload.done        = 1;
    rPayload.rayOrigin   = origin.xyz;
    rPayload.rayDir      = direction.xyz;

    vec3 hitValue = vec3(0.0);
    for(;;) {
      traceRayEXT(topLevelAS, // acceleration structure
          rayFlags,       // rayFlags
          0xFF,           // cullMask
          0,              // sbtRecordOffset
          0,              // sbtRecordStride
          0,              // missIndex
          origin.xyz,     // ray origin
          tMin,           // ray min range
          direction.xyz,  // ray direction
          tMax,           // ray max range
          0               // payload (location = 0)
      );

      hitValue += rPayload.hitValue * rPayload.attenuation;

      rPayload.depth++;
      if(rPayload.done == 1 || rPayload.depth >= pcRay.totalBounces) {
        break;
      }

      origin.xyz    = rPayload.rayOrigin;
      direction.xyz = rPayload.rayDir;
      rPayload.done = 1; // Will stop if a reflective material isn't hit
    }

	// Gamma correction
    float gamma = 2.2;
	hitValue = pow(hitValue, vec3(1.0/gamma));

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1.0));
}
